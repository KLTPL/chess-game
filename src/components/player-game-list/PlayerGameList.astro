---
import getUserGames from "../../db/game/getUserGames";
import GameDisplaysContainer from "./GameDisplaysContainer";
import ButtonSecondary from "../buttons/ButtonSecondary";
import { WIDTHS } from "./utils";
import GameInviteLinkButton from "../game-invite/create/GameInviteLinkCreate";

interface Props {
  endIdx: number;
  loadMoreOnScroll: boolean;
  headerLink?: string;
  addStyles?: string;
  langDictGameList: Record<string, string>;
  langDictGameInviteCreate: Record<string, string>;
}

const {
  endIdx,
  loadMoreOnScroll,
  headerLink,
  addStyles,
  langDictGameList: langDict,
  langDictGameInviteCreate,
} = Astro.props;

const id = Astro.locals.user?.id;
if (id === undefined) {
  throw new Error("User id not defined in a authentication-required component");
}
const START_IDX = 0,
  END_IDX = endIdx;
const userGamesData = await getUserGames({
  id,
  startIdx: START_IDX,
  endIdx: END_IDX,
});

if (userGamesData === null) {
  return new Response(null, {
    status: 404,
    statusText: "User games not found",
  });
}
---

<div
  class={"w-[100vw] sm:w-[700px] overflow-x-auto sm:flex" +
    (addStyles === undefined ? "" : ` ${addStyles}`)}
>
  <div
    class="flex w-[700px] flex-col items-stretch overflow-hidden rounded-md shadow-md"
  >
    {
      headerLink === undefined ? (
        <div class="flex flex-row bg-primary-b px-3 py-2">
          <div class="text-lg">{langDict["header"]}</div>
          <div class="grow" />
        </div>
      ) : (
        <a href={headerLink} class="bg-primary-b">
          <div class="flex flex-row px-3 py-2">
            <div class="text-lg">{langDict["header"]}</div>
            <div class="grow" />
            <div class="grid place-content-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                fill="currentColor"
                class="bi bi-arrow-right"
                viewBox="0 0 16 16"
              >
                <path
                  fill-rule="evenodd"
                  d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8"
                />
              </svg>
            </div>
          </div>
        </a>
      )
    }

    <div class="flex-rows flex bg-bg3 py-1 text-sm">
      <div style={{ width: `${WIDTHS.TYPE}%` }} class="text-center">
        {langDict["bar-type"]}
      </div>
      <div style={{ width: `${WIDTHS.PLAYERS}%` }} class="text-center">
        {langDict["bar-players"]}
      </div>
      <div style={{ width: `${WIDTHS.RESULT}%` }} class="text-center">
        {langDict["bar-result"]}
      </div>
      <div style={{ width: `${WIDTHS.MOVES}%` }} class="text-center">
        {langDict["bar-moves"]}
      </div>
      <div style={{ width: `${WIDTHS.DATE}%` }} class="text-center">
        {langDict["bar-date"]}
      </div>
    </div>
    {
      userGamesData.length === 0 ? (
        <div class="flex flex-col items-center gap-6 bg-bg2 py-6">
          <div>{langDict["no_games"]}</div>
          <div class="grid w-full grid-cols-2 grid-rows-1">
            <div class="grid place-content-center">
              <GameInviteLinkButton
                langDict={langDictGameInviteCreate}
                client:load
              />
            </div>
            <div class="grid place-content-center">
              <a href="/friends">
                <ButtonSecondary
                  textContent={langDict["invite_friend"]}
                  client:load
                />
              </a>
            </div>
          </div>
        </div>
      ) : (
        <GameDisplaysContainer
          initGamesData={userGamesData}
          loadMoreOnScroll={loadMoreOnScroll}
          playerId={id}
          startIdx={START_IDX}
          incrementBy={END_IDX - START_IDX + 1}
          langDictGameList={langDict}
          client:only="react"
        />
      )
    }
  </div>
</div>
